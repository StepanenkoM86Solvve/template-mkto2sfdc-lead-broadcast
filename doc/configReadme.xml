<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Marketo to Salesforce Lead Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Marketo admin I want to synchronize Leads between Marketo and Salesforce orgs.

This Anypoint Template should serve as a foundation for setting an online sync of Leads from Marketo instance to another Salesforce instances. Every time there is a new Lead or a change in an already existing one, the integration will poll for changes in Marketo source instance and it will be responsible for updating the Lead on the target orgs.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Anypoint Template leverages the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing).
The batch job is divided in *Process* and *On Complete* stages.

The integration is triggered by a scheduler defined in the endpoints.xml file. The application queries/receives newest Marketo updates/creations and adds them to one of the JMS topics depending on the country for the Lead record.

The application has two different batch jobs consuming this JMS topics, one for migrating the changes to the first Salesforce Org (Leads located in 'US') and the other one for migrating the changes to the other Salesforce Org (Leads located in other countries as 'US').

During the *Process* stage, each Salesforce Lead will be matched with an existing Lead in the target system by Email.
The last step of the *Process* stage will group the Leads and create/update them in Salesforce Org.
Finally during the *On Complete* stage the Anypoint Template will log output statistics data into the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. **Failing to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ scheduler.frequency `60000`
+ scheduler.start.delay `0`
+ watermark.default.expression `2018-05-13T03:00:59Z`
+ page.size `200`

**Salesforce Connector configuration for company A**
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Salesforce Connector configuration for company B**
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`

**Marketo Connector configuration**
+ mkto.clientId `clientReachPointId`
+ mkto.clientSecret `clientReachPointSecret`
+ mkto.basePath `/`
+ mkto.host `marketo.mktorest.com`
+ mkto.accessTokenUrl `https://marketo.mktorest.com/identity/oauth/token`

**JMS Connector configuration**
+ jms.username `admin`
+ jms.password `admin`
+ jms.brokerUrl `tcp://localhost:61616`

]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint template calls to the API can be calculated using the formula:

***1 + X + X / ${page.size}***

Being ***X*** the number of Leads to be synchronized on each run. 

The division by ***${page.size}*** is because, by default, Leads are gathered in groups of ${page.size} for each Upsert API Call in the aggregation step. Also consider that these calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Anypoint Template is implemented in this XML, directed by mainFlow, which deduplicates Leads by Id, create two separate collections depending on the Lead's country field and send them through two different topics for further processing.
Flows processAQueueLeadsToBatchFlow and processBQueueLeadsToBatchFlow get data from specific JMS topic and start executing specific batch.
There are two batches. Both have same logic, but the first is upserting Leads into Salesforce instance A and the other one - into Salesforce instance B. 

The logic of the batches is:

1. During the *Process* stage, each Salesforce Lead will be matched with an existing Lead in the target system by Email.
2. The last step of the *Process* stage will group the Leads and create/update them in particular Salesforce Org.
3. Finally during the *On Complete* stage the batches will log output statistics data into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the Scheduler that will periodically query Marketo for updated/created fields - firstName,lastName,email,company,country of Lead objects and then executing the mainFlow implemented in businessLogic.xml.
]]>
		</section>
	</sections>
</configuration>
